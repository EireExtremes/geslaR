[{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://eireextremes.github.io/geslaR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://eireextremes.github.io/geslaR/articles/intro-to-arrow.html","id":"the-apache-arrow-framework","dir":"Articles","previous_headings":"","what":"The Apache Arrow framework","title":"Introduction to Apache Arrow framework","text":"definition Apache Arrow framework best described website: Apache Arrow software development platform building high performance applications process transport large data sets. designed improve performance analytical algorithms efficiency moving data one system programming language another. critical component Apache Arrow -memory columnar format, standardized, language-agnostic specification representing structured, table-like datasets -memory. data format rich data type system (including nested user-defined data types) designed support needs analytic database systems, data frame libraries, . words, Apache Arrow framework designed deal large datasets (larger memory), using -memory analytics. means computations made “Arrow datasets” extremely efficient, resulting fast computations, otherwise infeasible standard computations. Apache Arrow framework can used many different programming languages. However, languages, specific libraries deal . R, arrow package available load manipulate Arrow datasets. manipulation Arrow objects made dplyr verbs, helps users feel familiar . dplyr verbs available work Arrow datasets, vast majority used ones already “translated” used Arrow. list functions can found Functions available Arrow dplyr queries. general introduction using dplyr verbs Arrow can seen Data analysis dplyr syntax.","code":""},{"path":"https://eireextremes.github.io/geslaR/articles/intro-to-arrow.html","id":"using-apache-arrow-with-geslar","dir":"Articles","previous_headings":"","what":"Using Apache Arrow with geslaR","title":"Introduction to Apache Arrow framework","text":"geslaR package makes use Apache Arrow framework deal GESLA dataset R. tutorial, use download_gesla() function, download full GESLA dataset, show basic data manipulation arrow package dplyr verbs. first time load geslaR package, automatically load arrow dplyr packages. download full GESLA dataset, one can simply use create directory called gesla_dataset current working directory (defined getwd()) download full dataset locally. download may take time (expect around 5 10 minutes), depends internet connection. Note full dataset need least 7GB (hard drive) storage, make sure feasible. However, downloaded, access full dataset, need . notice full dataset composed 5119 Apache Parquet files, ending .parquet files originally distributed GESLA database, one refers site data comes . load full dataset R, use arrow::open_dataset() function, specifying location .parquet files. Although many files, function recognizes single dataset, structure (“Schema”). Since ArrowObject object, actually load full dataset memory (standard R object, tibble data.frame). Note, however, basic information, dim() names() can retrieved simply manipulation dataset must made using dplyr verbs. example, count number observations country, one use Note, however, output just query full dataset. explicitly return calculation, use dplyr::collect(), result standard tibble intentionally done can manipulate, calculate, extract information dataset, taking advantage Arrow -memory analytics framework. way, computations faster, idea just use dplyr::collect() final result needed R object. example, calculate mean sea level Ireland per year queries made, long dplyr verbs used supported arrow package. example, ask minimum, mean, maximum sea level values Ireland per year query used produce graphics ggplot2, example. case, note call dplyr::collect() mandatory advance using ggplot2 functions, accept standard R objects (tibble data.frame).","code":"library(geslaR) #> Loading required package: arrow #>  #> Attaching package: 'arrow' #> The following object is masked from 'package:utils': #>  #>     timestamp #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union download_gesla() ## Number of downloaded files length(list.files(\"gesla_dataset\")) #> [1] 5119 ## Check the first files head(list.files(\"gesla_dataset\")) #> [1] \"a121-a12-nld-cmems.parquet\"      \"a2-a2-bel-cmems.parquet\"         #> [3] \"aalesund-aal-nor-cmems.parquet\"  \"aarhus-aar-dnk-cmems.parquet\"    #> [5] \"aasiaat-aas-grl-gloss.parquet\"   \"abashiri-347a-jpn-uhslc.parquet\" ## Open dataset da <- open_dataset(\"gesla_dataset\") ## Check the object da #> FileSystemDataset with 5119 Parquet files #> date_time: timestamp[us] #> year: int64 #> month: int64 #> day: int64 #> hour: int64 #> country: string #> site_name: string #> lat: double #> lon: double #> sea_level: double #> qc_flag: int64 #> use_flag: int64 #> file_name: string #>  #> See $metadata for additional Schema metadata ## Verify class class(da) #> [1] \"FileSystemDataset\" \"Dataset\"           \"ArrowObject\"       #> [4] \"R6\" dim(da) #> [1] 1172435674         13 names(da) #>  [1] \"date_time\" \"year\"      \"month\"     \"day\"       \"hour\"      \"country\"   #>  [7] \"site_name\" \"lat\"       \"lon\"       \"sea_level\" \"qc_flag\"   \"use_flag\"  #> [13] \"file_name\" da |>     count(country) #> FileSystemDataset (query) #> country: string #> n: int64 #>  #> See $.data for the source Arrow object da |>     count(country) |>     collect() #> # A tibble: 113 × 2 #>    country         n #>    <chr>       <int> #>  1 BEL       1263467 #>  2 JPN      74580447 #>  3 NOR      28452201 #>  4 DNK      36726648 #>  5 USA     243838504 #>  6 GBR      76038844 #>  7 SLV        812230 #>  8 MEX      10755284 #>  9 CAN      67019312 #> 10 NLD     133699230 #> # ℹ 103 more rows da |>     filter(country == \"IRL\", use_flag == 1) |>     group_by(year) |>     summarise(mean = mean(sea_level)) |>     arrange(year) |>     collect() #> # A tibble: 63 × 2 #>     year  mean #>    <int> <dbl> #>  1  1958  3.11 #>  2  1959  3.12 #>  3  1960  3.16 #>  4  1961  3.16 #>  5  1962  3.09 #>  6  1963  3.13 #>  7  1964  3.13 #>  8  1965  3.11 #>  9  1966  3.15 #> 10  1967  3.14 #> # ℹ 53 more rows da |>     filter(country == \"IRL\", use_flag == 1) |>     group_by(year) |>     summarise(         min = min(sea_level),         mean = mean(sea_level),         max = max(sea_level)) |>     collect() #> # A tibble: 63 × 4 #>     year   min     mean   max #>    <int> <dbl>    <dbl> <dbl> #>  1  2018 -4.09  0.0462  11.6  #>  2  2019 -5.80  0.0436   3.18 #>  3  2003 -1.13 -0.00629  0.9  #>  4  2004 -1.11  0.0391   4.07 #>  5  2005 -1.32  1.32     4.83 #>  6  2006 -2.47  0.692    4.94 #>  7  2007 -3.48 -0.0374   4.94 #>  8  2008 -3.41 -0.00481  4.85 #>  9  2009 -3.00  0.0108   2.94 #> 10  2010 -3.71 -0.0192   3.11 #> # ℹ 53 more rows library(ggplot2) da |>     filter(country == \"IRL\", use_flag == 1) |>     group_by(year) |>     summarise(         min = min(sea_level),         mean = mean(sea_level),         max = max(sea_level)) |>     collect() |>     tidyr::pivot_longer(cols = c(min, mean, max)) |>     ggplot(aes(x = year, y = value, colour = name)) +     geom_line() +     theme(legend.position = \"top\") +     labs(colour = \"\")"},{"path":"https://eireextremes.github.io/geslaR/articles/intro-to-geslaR.html","id":"loading-the-package","dir":"Articles","previous_headings":"","what":"Loading the package","title":"Dealing with the GESLA dataset in R","text":"first load geslaR package R session, two packages automatically loaded: arrow dplyr. two packages strictly necessary dealing huge dataset like GESLA, alleviate need load memory . full GESLA dataset 1.7 billion lines, nearly impossible load R (RAM memory language, like e.g. Python) . avoid problem, two possibilities: Load (smaller) subsets full dataset Use “-memory” analytics framework best case scenario, two approaches can used together maximum efficiency, geslaR package designed achieve . Regardless way GESLA data loaded R, best way deal using Apache Arrow framework. detailed explanation examples, please see vignette(\"intro--arrow\").","code":"library(geslaR) #> Loading required package: arrow #>  #> Attaching package: 'arrow' #> The following object is masked from 'package:utils': #>  #>     timestamp #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union"},{"path":"https://eireextremes.github.io/geslaR/articles/intro-to-geslaR.html","id":"downloading-the-full-gesla-dataset","dir":"Articles","previous_headings":"","what":"Downloading the full GESLA dataset","title":"Dealing with the GESLA dataset in R","text":"want explore full GESLA dataset, can download download_gesla() function follows create directory called gesla_dataset current working directory (defined getwd()) download full dataset locally. download may take time (expect around 5 10 minutes), depends internet connection. Note full dataset need least 7GB (hard drive) storage, make sure feasible. However, downloaded, access full dataset, need . notice full dataset composed 5119 Apache Parquet files, ending .parquet files originally distributed GESLA dataset, one refers site data comes . load full dataset R, use arrow::open_dataset() function, specifying location .parquet files. Although many files, function recognises single dataset, structure (“Schema”). Since ArrowObject object, actually load full dataset memory (standard R object, tibble data.frame). Note, however, basic information, dim() names() can retrieved simply manipulation dataset must made using dplyr verbs. example, count number observations country, one use","code":"download_gesla() ## Number of downloaded files length(list.files(\"gesla_dataset\")) #> [1] 5119 ## Check the first files head(list.files(\"gesla_dataset\")) #> [1] \"a121-a12-nld-cmems.parquet\"      \"a2-a2-bel-cmems.parquet\"         #> [3] \"aalesund-aal-nor-cmems.parquet\"  \"aarhus-aar-dnk-cmems.parquet\"    #> [5] \"aasiaat-aas-grl-gloss.parquet\"   \"abashiri-347a-jpn-uhslc.parquet\" ## Open dataset da <- open_dataset(\"gesla_dataset\") ## Check the object da #> FileSystemDataset with 5119 Parquet files #> date_time: timestamp[us] #> year: int64 #> month: int64 #> day: int64 #> hour: int64 #> country: string #> site_name: string #> lat: double #> lon: double #> sea_level: double #> qc_flag: int64 #> use_flag: int64 #> file_name: string #>  #> See $metadata for additional Schema metadata ## Verify class class(da) #> [1] \"FileSystemDataset\" \"Dataset\"           \"ArrowObject\"       #> [4] \"R6\" dim(da) #> [1] 1172435674         13 names(da) #>  [1] \"date_time\" \"year\"      \"month\"     \"day\"       \"hour\"      \"country\"   #>  [7] \"site_name\" \"lat\"       \"lon\"       \"sea_level\" \"qc_flag\"   \"use_flag\"  #> [13] \"file_name\" da |>     count(country) |>     collect() #> # A tibble: 113 × 2 #>    country         n #>    <chr>       <int> #>  1 BEL       1263467 #>  2 JPN      74580447 #>  3 USA     243838504 #>  4 DNK      36726648 #>  5 SLV        812230 #>  6 GBR      76038844 #>  7 YEM         63362 #>  8 CAN      67019312 #>  9 AUS      72441932 #> 10 EGY        220872 #> # ℹ 103 more rows"},{"path":"https://eireextremes.github.io/geslaR/articles/intro-to-geslaR.html","id":"querying-subsets-directly-into-r","dir":"Articles","previous_headings":"","what":"Querying subsets directly into R","title":"Dealing with the GESLA dataset in R","text":"query_gesla() function can used load subsets full GESLA dataset R. function connect GESLA dataset hosted Amazon AWS S3 bucket, automatically filter required piece data. Note query may vary, depend size required subset internet connection speed. selection made specifying one countries, years site names. mandatory argument country, character vector three-letter ISO 3166-1 alpha-3 codes. argument year empty, available years countries selected. occurs site_name argument. example, select available data Ireland (IRL), simply use also ArrowObject object, works way Arrow object type, .e., can manipulated dplyr verbs. end section show examples. Many queries can made, example, one last example, may interested data site Dublin_Port Ireland, years 2015 2017. query done follows Now explore subset using dplyr verbs usual Note use dplyr::collect() function end call. necessary convert final result (processed Arrow) common R object (usually tibble similar). stated , queries made query_gesla() may take time process. avoid repeating query every new session, can save object file locally, available instantly next time may need . achieve , can use write_gesla() function case, call create file named gesla-data.parquet, ready reading time, without need querying . time, just use make available . Please, try save object standard R file, .rds .rda, using saveRDS() save() example. case resulting saved object original object, ArrowObject object standard R object (actually just pointer Arrow style object). query_gesla() function also two arguments. use_flag = 1 means data suggested GESLA team useful analysis must used. Please see GESLA format page information. argument, as_data_frame = FALSE specifies resulting object ArrowObject (default) data.frame. highly recommend keep default option, resulting data.frame can larger--memory, resulting memory overflow even R session crash. Keeping object ArrowObject always guarantee resulting query made available. case, ArrowObject can always converted data.frame, desired, without need repeat query as_data_frame = TRUE. example, object da created (ArrowObject) may converted data.frame ","code":"da <- query_gesla(country = \"IRL\") #> ℹ This process can take some time, as it depends on the size of the final dataset, and on #> internet connection. #>  ℹ Connecting to the data server... [K  ✔ Connecting to the data server... [3.5s] [K #>  ℹ Filtering data. This can take some time... [K  ✔ Filtering data. This can take some time... [2m 43.4s] [K #>  ℹ Query finished. [K  ✔ Query finished. [13ms] [K da #> Table #> 16321218 rows x 13 columns #> $date_time <timestamp[us]> #> $year <int64> #> $month <int64> #> $day <int64> #> $hour <int64> #> $country <string> #> $site_name <string> #> $lat <double> #> $lon <double> #> $sea_level <double> #> $qc_flag <int64> #> $use_flag <int64> #> $file_name <string> #>  #> See $metadata for additional Schema metadata dim(da) #> [1] 16321218       13 names(da) #>  [1] \"date_time\" \"year\"      \"month\"     \"day\"       \"hour\"      \"country\"   #>  [7] \"site_name\" \"lat\"       \"lon\"       \"sea_level\" \"qc_flag\"   \"use_flag\"  #> [13] \"file_name\" class(da) #> [1] \"Table\"        \"ArrowTabular\" \"ArrowObject\"  \"R6\" ## Select one specific year da <- query_gesla(country = \"IRL\", year = 2015)  ## Multiple years da <- query_gesla(country = \"IRL\", year = c(2015, 2017)) da <- query_gesla(country = \"IRL\", year = 2010:2017) da <- query_gesla(country = \"IRL\", year = c(2010, 2012, 2015))  ## Multiple countries da <- query_gesla(country = c(\"IRL\", \"ATA\"), year = 2015) da <- query_gesla(country = c(\"IRL\", \"ATA\"), year = 2010:2017) da <- query_gesla(country = \"IRL\", year = c(2015, 2017),     site_name = \"Dublin_Port\") #> ℹ This process can take some time, as it depends on the size of the final dataset, and on #> internet connection. #>  ℹ Connecting to the data server... [K  ✔ Connecting to the data server... [3.4s] [K #>  ℹ Filtering data. This can take some time... [K  ✔ Filtering data. This can take some time... [2m 34s] [K #>  ℹ Query finished. [K  ✔ Query finished. [21ms] [K ## Verifying number of observations per year da |>     count(year) |>     collect() #> # A tibble: 2 × 2 #>    year      n #>   <int>  <int> #> 1  2015  93790 #> 2  2017 104835  ## Calculating summary statistics per year da |>     group_by(year) |>     summarise(         min = min(sea_level),         mean = mean(sea_level),         max = max(sea_level)) |>     collect() #> # A tibble: 2 × 4 #>    year   min    mean   max #>   <int> <dbl>   <dbl> <dbl> #> 1  2015 -2.62 -0.0104  2.38 #> 2  2017 -2.43  0.0762  2.53 write_gesla(da) da <- read_gesla(\"gesla-data.parquet\") class(da) #> [1] \"Table\"        \"ArrowTabular\" \"ArrowObject\"  \"R6\" db <- da |>     collect() class(db) #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\""},{"path":"https://eireextremes.github.io/geslaR/articles/intro-to-geslaR.html","id":"using-the-gesla-shiny-app","dir":"Articles","previous_headings":"","what":"Using the GESLA Shiny app","title":"Dealing with the GESLA dataset in R","text":"GESLA Shiny app (geslaR-app) developed user-friendly interface explore whole GESLA dataset. app may called simply create directory called gesla-app current working directory, containing necessary files app , sub-directory called gesla_dataset containing GESLA dataset files (.parquet files, done download_gesla() function explained ). Note first time function called, create directories download full GESLA dataset. However, done, next time function called working directory, app open default browser (downloads necessary). web-interface allows user apply basic filters, choosing countries, years sites. , app filter data show information selected subset. first tab contains preview selected subset. two subsequent tabs provide plots number observations year, summary plots sea level data . last tab show map selected locations, clicking locations, pop-show information specific station. user option download selected subset CSV Parquet file formats. highly recommend export Parquet file, file size much smaller, can simply loaded R read_gesla() function, creating ArrowObject object.","code":"run_gesla_app()"},{"path":"https://eireextremes.github.io/geslaR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fernando Mayer. Author, maintainer. Niamh Cahill. Author.","code":""},{"path":"https://eireextremes.github.io/geslaR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mayer F, Cahill N (2023). geslaR: Get Manipulate GESLA Dataset. https://github.com/EireExtremes/geslaR, https://eireextremes.github.io/geslaR/.","code":"@Manual{,   title = {geslaR: Get and Manipulate the GESLA Dataset},   author = {Fernando Mayer and Niamh Cahill},   year = {2023},   note = {https://github.com/EireExtremes/geslaR, https://eireextremes.github.io/geslaR/}, }"},{"path":"https://eireextremes.github.io/geslaR/index.html","id":"geslar","dir":"","previous_headings":"","what":"Get and Manipulate the GESLA Dataset","title":"Get and Manipulate the GESLA Dataset","text":"Get Manipulate GESLA Dataset geslaR package developed deal GESLA (Global Extreme Sea Level Analysis) dataset. GESLA (Global Extreme Sea Level Analysis) project aims provide global database higher-frequency sea-level records researchers study tides, storm surges, extreme sea levels, related processes. Three versions GESLA dataset available download, including zip file containing entire dataset, CSV file containing metadata, KML file plotting location station records Google Earth. geslaR R package developed aims facilitate access GESLA dataset providing functions download entirely, query subsets directly R, without need downloading full dataset. Also, provides built-web-application, users can apply basic filters select data interest, generating informative plots, showing selected sites world. Users can download selected subset data CSV Parquet file formats, latter recommended due smaller size ability handle many programming languages Apache Arrow language -memory analytics. web interface developed using Shiny R package, CSV files GESLA dataset converted Parquet format stored Amazon AWS bucket. get started package, please see vignette Dealing GESLA dataset R, find besic introduction functions available use one . learn use Apache Arrow framework deal dataset R, see vignette Introduction Apache Arrow framework.","code":""},{"path":"https://eireextremes.github.io/geslaR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Get and Manipulate the GESLA Dataset","text":"can install latest version geslaR GitHub : able use built-web-application, package dependencies also installed :","code":"## install.packages(\"devtools\") devtools::install_github(\"EireExtremes/geslaR\") devtools::install_github(\"EireExtremes/geslaR\", dependencies = TRUE)"},{"path":"https://eireextremes.github.io/geslaR/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Get and Manipulate the GESLA Dataset","text":"read files GESLA dataset, use read_gesla() function. make query GESLA dataset load directly R, one can use query_gesla() function. download full dataset locally, use download_gesla() function. open built-web-application, use run_gesla_app() function (note need installation geslaR dependencies).","code":"library(geslaR) ##------------------------------------------------------------------ ## Import an internal example Parquet file tmp <- tempdir() file.copy(system.file(     \"extdata\", \"ireland.parquet\", package = \"geslaR\"), tmp) da <- read_gesla(paste0(tmp, \"/ireland.parquet\")) ## Check size in memory object.size(da)  ##------------------------------------------------------------------ ## Import an internal example CSV file tmp <- tempdir() file.copy(system.file(     \"extdata\", \"ireland.csv\", package = \"geslaR\"), tmp) da <- read_gesla(paste0(tmp, \"/ireland.csv\")) ## Check size in memory object.size(da)  ##------------------------------------------------------------------ ## Import an internal example Parquet file as data.frame tmp <- tempdir() file.copy(system.file(     \"extdata\", \"ireland.parquet\", package = \"geslaR\"), tmp) da <- read_gesla(paste0(tmp, \"/ireland.parquet\"),     as_data_frame = TRUE) ## Check size in memory object.size(da)  ##------------------------------------------------------------------ ## Import an internal example CSV file as data.frame tmp <- tempdir() file.copy(system.file(     \"extdata\", \"ireland.csv\", package = \"geslaR\"), tmp) da <- read_gesla(paste0(tmp, \"/ireland.csv\"),     as_data_frame = TRUE) ## Check size in memory object.size(da) ## Query a subset of the GESLA dataset, without the need of downloading ## all the dataset de <- query_gesla(country = \"IRL\", year = 2020:2021, as_data_frame = FALSE) class(de) ## Download the whole dataset (parquet files) into a specific location download_gesla(dest = \"./gesla_dataset\") ## ℹ The total size of the dataset is about 7GB, and the download time will depend on ## your internet connection ## Do you want to download the whole dataset?  ## 1: Yes ## 2: No  ## Selection: 1 ## ℹ Wait while the dataset is downloaded... ## This function will download the whole dataset (if not yet done), and ## open the geslar-app web interface locally on your browser run_gesla_app()"},{"path":"https://eireextremes.github.io/geslaR/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Get and Manipulate the GESLA Dataset","text":"work emanated research conducted financial support Science Foundation Ireland co-funded GSI Grant number 20/FFP-P/8610.","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/download_gesla.html","id":null,"dir":"Reference","previous_headings":"","what":"Download the GESLA dataset — download_gesla","title":"Download the GESLA dataset — download_gesla","text":"function download entire GESLA dataset specified folder. Note full dataset 7GB size, total download time may take minutes, depend internet connection. need whole dataset, can use query_gesla() function, directly import subset .","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/download_gesla.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download the GESLA dataset — download_gesla","text":"","code":"download_gesla(   dest = \"./gesla_dataset\",   ask = TRUE,   messages = TRUE,   overwrite = FALSE )"},{"path":"https://eireextremes.github.io/geslaR/reference/download_gesla.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download the GESLA dataset — download_gesla","text":"dest directory download files . directory exist, created. Defaults folder called gesla_dataset current working directory. ask Ask confirmation downloading? Defaults TRUE. messages Show informative messages? Defaults TRUE. overwrite Overwrite whole dataset (.e. download )? Defaults FALSE. Note , TRUE, overwrite function called directory dest .","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/download_gesla.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download the GESLA dataset — download_gesla","text":"whole GESLA dataset, consisting 5119 files (.parquet extension). approximately 7GB size.","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/download_gesla.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download the GESLA dataset — download_gesla","text":"function usefull want deal files GESLA dataset. need subset, can use query_gesla() function, GESLA Shiny app interface, run_gesla_app() function.","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/download_gesla.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Download the GESLA dataset — download_gesla","text":"Fernando Mayer","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/download_gesla.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download the GESLA dataset — download_gesla","text":"","code":"if (FALSE) { ## Download to 'gesla_dataset' folder in the current working ## directory download_gesla() ## To overwrite (download again) on the same location download_gesla(overwrite = TRUE) ## Download to another directory download_gesla(dest = \"~/gesla\") ## Don't ask for confirmation before download download_gesla(ask = FALSE) ## Don't show informative messages download_gesla(messages = FALSE) ## Don't ask for confirmation neither show messages download_gesla(ask = FALSE, messages = FALSE) }"},{"path":"https://eireextremes.github.io/geslaR/reference/query_gesla.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the GESLA dataset — query_gesla","title":"Query the GESLA dataset — query_gesla","text":"function make query fetch subset GESLA dataset. least country code one year must specified. Site names can also specified, optional. default, resulting subset contain data revised recommended analysis, GESLA group researchers.","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/query_gesla.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the GESLA dataset — query_gesla","text":"","code":"query_gesla(   country,   year = NULL,   site_name = NULL,   use_flag = 1,   as_data_frame = FALSE )"},{"path":"https://eireextremes.github.io/geslaR/reference/query_gesla.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the GESLA dataset — query_gesla","text":"country character vector specifying selected countries, using three-letter ISO 3166-1 alpha-3 code. See Details. year numeric vector specifying selected years. NULL (default), available years selected. site_name Optional character vector site names. use_flag default 1, means use data revised usefull analysis. Can 0, fetch revised recommend analysis, c(0, 1) fetch data. See Details. as_data_frame FALSE (default), data imported arrow_dplyr_query object. Otherwise, data tbl_df (data.frame) format. See Details.","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/query_gesla.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the GESLA dataset — query_gesla","text":"object class arrow_dplyr_query tbl_df (data.frame).","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/query_gesla.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query the GESLA dataset — query_gesla","text":"country codes must follow three-letter ISO 3166-1 alpha-3 code. However, note countries available GESLA dataset. doubt, please check GESLA Shiny app interface (geslaR-app) online server, use run_gesla_app() function open interface locally. use_flag argument must 1 0, c(0, 1). use_flag column GESLA dataset thet indicates wehter data used analysis . 1 (default) indicates , 0 otherwise. data analysis scenario, user must interested using recommended data, argument changed. However, cases, one must interested non-recommended data, therefore option available. Also, can specify c(0, 1) fetch data (usable usable). case, use_flag column always present, can used post-processing. Please, see GESLA format documentation details. default argument as_data_frame = FALSE result object arrow_dplyr_query class. advantage , regardless size resulting dataset, object small (memory) size. Also, happens Arrow Table class, can manipulated dplyr verbs. Please, see documentation Arrow website. Note , as_data_frame argument set TRUE, imported R object vary size, according size subset. many situations, can take long time may even infeasible, since object can result \"larger--memory\" size, possibly make R operations slow even session crash. Therefore, always recommend start as_data_frame = FALSE, work dataset . Please, see vignette(\"intro--geslaR\") detailed example.","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/query_gesla.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Query the GESLA dataset — query_gesla","text":"Fernando Mayer","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/query_gesla.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query the GESLA dataset — query_gesla","text":"","code":"if (FALSE) { ## Simple query da <- query_gesla(country = \"IRL\")  ## Select one specific year da <- query_gesla(country = \"IRL\", year = 2015)  ## Multiple years da <- query_gesla(country = \"IRL\", year = c(2015, 2017)) da <- query_gesla(country = \"IRL\", year = 2010:2017) da <- query_gesla(country = \"IRL\", year = c(2010, 2012, 2015)) da |>     count(year) |>     collect()  ## Multiple countries da <- query_gesla(country = c(\"IRL\", \"ATA\"), year = 2015) da <- query_gesla(country = c(\"IRL\", \"ATA\"), year = 2010:2017) da |>     count(country, year) |>     collect()  ## Specifying a site name da <- query_gesla(country = \"IRL\", year = c(2015, 2017),     site_name = \"Dublin_Port\") da |>     count(year) |>     collect() }"},{"path":"https://eireextremes.github.io/geslaR/reference/read_gesla.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a GESLA dataset — read_gesla","title":"Read a GESLA dataset — read_gesla","text":"Read CSV Parquet file, exported GESLA Shiny app interface (geslaR-app). \"GESLA dataset file\" subset GESLA dataset, fetched geslaR-app. using app, can choose download selected subset CSV Parquet file formats. Whichever option chosen function automatically identify file type use appropriate functions import dataset R. function can used exported files online interface (hosted server) local interface, using run_gesla_app() function.","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/read_gesla.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a GESLA dataset — read_gesla","text":"","code":"read_gesla(file, as_data_frame = FALSE, ...)"},{"path":"https://eireextremes.github.io/geslaR/reference/read_gesla.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a GESLA dataset — read_gesla","text":"file file name (must end .csv .parquet ) as_data_frame FALSE (default), data imported Arrow Table format. Otherwise, data tbl_df (data.frame) format. See Details. ... arguments arrow::read_csv_arrow(), arrow::read_parquet(), arrow package.","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/read_gesla.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a GESLA dataset — read_gesla","text":"Arrow Table object, tbl_df (data.frame)","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/read_gesla.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a GESLA dataset — read_gesla","text":"highly recommend export subsets GESLA dataset geslaR-app Parquet file format. format much smaller file size comparred CSV format. case, difference CSV Parquet files file size. However, importing data R, file types option imported Arrow Table format, default (argument as_data_frame = FALSE). way, object created R small size, independent big file size . deal type object, can use dplyr verbs, way normal data.frame (tbl_df). examples can found Arrow documentation. as_data_frame argument set TRUE, imported R object vary size, according size dataset, regardless file type. many situations, can infeasible, since object can result \"larger--memory\" size, possibly make R operations slow even session crash. Therefore, always recommend start as_data_frame = FALSE, work dataset . See Examples .","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/read_gesla.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read a GESLA dataset — read_gesla","text":"Fernando Mayer","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/read_gesla.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a GESLA dataset — read_gesla","text":"","code":"##------------------------------------------------------------------ ## Import an internal example Parquet file tmp <- tempdir() file.copy(system.file(     \"extdata\", \"ireland.parquet\", package = \"geslaR\"), tmp) #> [1] TRUE da <- read_gesla(paste0(tmp, \"/ireland.parquet\")) ## Check size in memory object.size(da) #> 488 bytes  ##------------------------------------------------------------------ ## Import an internal example CSV file tmp <- tempdir() file.copy(system.file(     \"extdata\", \"ireland.csv\", package = \"geslaR\"), tmp) #> [1] TRUE da <- read_gesla(paste0(tmp, \"/ireland.csv\")) ## Check size in memory object.size(da) #> 488 bytes  ##------------------------------------------------------------------ ## Import an internal example Parquet file as data.frame tmp <- tempdir() file.copy(system.file(     \"extdata\", \"ireland.parquet\", package = \"geslaR\"), tmp) #> [1] FALSE da <- read_gesla(paste0(tmp, \"/ireland.parquet\"),     as_data_frame = TRUE) ## Check size in memory object.size(da) #> 11112 bytes  ##------------------------------------------------------------------ ## Import an internal example CSV file as data.frame tmp <- tempdir() file.copy(system.file(     \"extdata\", \"ireland.csv\", package = \"geslaR\"), tmp) #> [1] FALSE da <- read_gesla(paste0(tmp, \"/ireland.csv\"),     as_data_frame = TRUE) ## Check size in memory object.size(da) #> 11104 bytes"},{"path":"https://eireextremes.github.io/geslaR/reference/run_gesla_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the GESLA Shiny app — run_gesla_app","title":"Run the GESLA Shiny app — run_gesla_app","text":"Run GESLA Shiny app (geslaR-app) locally. first time function called, check GESLA dataset present. , prompt download . Please note entire GESLA dataset 7GB size, make sure enough space . Shiny app work entire dataset downloaded locally. Note, however, dataset needs downloaded , next time function called, app open instantly. application hosted online server, exact capabilities. advantage using interface locally primarily speed. need whole GESLA dataset /use subset , recommend use online interface filter desired subset. , can use read_gesla() function import .","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/run_gesla_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the GESLA Shiny app — run_gesla_app","text":"","code":"run_gesla_app(   app_dest = \"./gesla_app\",   dest = paste0(app_dest, \"/gesla_dataset\"),   overwrite = FALSE,   open = TRUE )"},{"path":"https://eireextremes.github.io/geslaR/reference/run_gesla_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the GESLA Shiny app — run_gesla_app","text":"app_dest destination directory host app database. created exist. default, create directory called gesla_app current working directory. dest destination directory host GESLA dataset files. default, create subdirectory directory defined app_dest. recommended change argument. needed, change app_dest argument. overwrite Overwrite current dataset? TRUE called directory app, overwrite (.e. download ) whole dataset. usually necessary, unless dataset really changed. open app open default browser? Defaults TRUE.","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/run_gesla_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the GESLA Shiny app — run_gesla_app","text":"geslaR-app Shiny interface open default browser.","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/run_gesla_app.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run the GESLA Shiny app — run_gesla_app","text":"geslaR-app Shiny interface relies set packages, defined Suggests fiels package DESCRIPTION file. called first time, function check packages available. one installed, message show one installed. Alternatively, can install reinstalling geslaR package devtools::install_github(\"EireExtremes/geslaR\", dependencies = TRUE). case, need restart R session. downloading GESLA dataset first time, may take minutes, since depends internet connection traffic Amazon AWS server. stop process ends completely. Note needed first time. dataset downloaded, time function called directory, interface open browser instantly.","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/run_gesla_app.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run the GESLA Shiny app — run_gesla_app","text":"Fernando Mayer","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/run_gesla_app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run the GESLA Shiny app — run_gesla_app","text":"","code":"if (FALSE) { ##------------------------------------------------------------------ ## This will create a directory called `geslaR_app` on the current ## working directory and import the necessary files for the app. ## Also, it will create a subdirectory `gesla_app/gesla_dataset`, ## where the dataset will be downloaded. run_gesla_app()  ##------------------------------------------------------------------ ## This will do the same, but everything will be in the specified path run_gesla_app(app_dest = \"~/my_gesla_app\")  ##------------------------------------------------------------------ ## This function call on the same directory where the app is hosted, ## will overwrite the whole dataset (i.e. it will be downloaded ## again). A prompt for confirmation will be issued. run_gesla_app(overwrite = TRUE) }"},{"path":"https://eireextremes.github.io/geslaR/reference/write_gesla.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a GESLA dataset — write_gesla","title":"Write a GESLA dataset — write_gesla","text":"Write CSV Parquet file. Given object x, function write file appropriate format store object hard drive, facilitating reading session. accepted classes x ArrowObject data.frame. x ArrowObject, resulting file .parquet extension, Apache Parquet file format. x data.frame, file standard .csv extension. function usefull save objects created query_gesla() function, example. However, may used case saving (possible subset) GESLA dataset may needed.","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/write_gesla.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a GESLA dataset — write_gesla","text":"","code":"write_gesla(x, file_name = \"gesla-data\", ...)"},{"path":"https://eireextremes.github.io/geslaR/reference/write_gesla.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a GESLA dataset — write_gesla","text":"x object class ArrowObject data.frame file_name name file created. Must provided without extension, determined class x. ... arguments arrow::write_csv_arrow(), arrow::write_parquet(), arrow package.","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/write_gesla.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a GESLA dataset — write_gesla","text":"file extension .csv, x data.frame, file extension .parquet, x ArrowObject","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/write_gesla.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write a GESLA dataset — write_gesla","text":"highly recommend always use ArrowObject class, much efficient dealing R. Also, resulting file (.parquet extension) objects type much smaller CSV files created data.frame objects.","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/write_gesla.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write a GESLA dataset — write_gesla","text":"Fernando Mayer","code":""},{"path":"https://eireextremes.github.io/geslaR/reference/write_gesla.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a GESLA dataset — write_gesla","text":"","code":"if (FALSE) { ##------------------------------------------------------------------ ## Import an internal example Parquet file ## Reading file tmp <- tempdir() file.copy(system.file(     \"extdata\", \"ireland.parquet\", package = \"geslaR\"), tmp) da <- read_gesla(paste0(tmp, \"/ireland.parquet\")) ## Generates a subset by filtering db <- da |>     filter(site_name == \"Dublin_Port\") ## Save filtered data as file write_gesla(db)  ##------------------------------------------------------------------ ## Querying some data ## Make the query da <- query_gesla(country = \"IRL\", site_name = \"Dublin_Port\") ## Save the resulting query to file write_gesla(da) }"},{"path":"https://eireextremes.github.io/geslaR/news/index.html","id":"geslar-10-1","dir":"Changelog","previous_headings":"","what":"geslaR 1.0-1","title":"geslaR 1.0-1","text":"Initial CRAN submission.","code":""}]
